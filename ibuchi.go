package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"sort"
	"strings"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var bot *tgbotapi.BotAPI

const dataFilePath = "R:/golang/ebuchi/userdata.json"

const ModeHTML = "HTML"

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
type UserData struct {
	Balance        int       // –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	LastGameTime   time.Time // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã
	LastGameTS     int64     // Unix timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã
	GamesPlayed    int       // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä
	IsBlacklisted  bool      // –ü—Ä–∏–∑–Ω–∞–∫ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
	SpamProtection int       // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
}

var (
	userDataMu     sync.Mutex
	userData       map[int64]*UserData // –ú–∞–ø–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö (–ø–æ –∏—Ö –∞–π–¥–∏)
	lastGame       map[int64]time.Time // –ú–∞–ø–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	spamProtection map[int64]time.Time
)

func connectWithTelegram() {
	var err error
	if bot, err = tgbotapi.NewBotAPI("6919106470:AAEYXfoBB64Jeod_qk5ceKdtmFudy1HPnA4"); err != nil {
		panic("Failed to connect to Telegram")
	}
}

func loadUserData() {
	fileData, err := ioutil.ReadFile(dataFilePath)
	if err != nil {
		fmt.Println("Error reading data file:", err)
		return
	}

	userDataMu.Lock()
	defer userDataMu.Unlock()

	err = json.Unmarshal(fileData, &userData)
	if err != nil {
		fmt.Println("Error unmarshalling data:", err)
		return
	}
}

func saveUserData() {
	userDataMu.Lock()
	defer userDataMu.Unlock()

	fileData, err := json.Marshal(userData)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö:", err)
		return
	}

	err = ioutil.WriteFile(dataFilePath, fileData, 0644)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö:", err)
	}
}

func resetThrows() {
	for {
		currentTime := time.Now().UTC()
		if currentTime.Hour() == 0 && currentTime.Minute() == 0 && currentTime.Second() == 0 {
			userDataMu.Lock()
			for _, user := range userData {
				user.GamesPlayed = 0
			}
			userDataMu.Unlock()
		}
		time.Sleep(1 * time.Minute) // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
	}
}

func sendMessage(chatID int64, msg string) {
	msgConfig := tgbotapi.NewMessage(chatID, msg)
	bot.Send(msgConfig)
}

func isMessageForIbuchi(update *tgbotapi.Update) bool {
	if update.Message == nil || update.Message.Dice == nil {
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–≤–µ–Ω "üèÄ"
	return update.Message.Dice.Emoji == "üèÄ"
}

func evaluateUserThrow(update *tgbotapi.Update) {
	// –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–≥–ª–∞—à–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	time.Sleep(2 * time.Second)
	diceValue := update.Message.Dice.Value // –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –±—Ä–æ—Å–∫–∞

	// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	userDataMu.Lock()
	defer userDataMu.Unlock()

	user, ok := userData[update.Message.From.ID]
	if !ok {
		user = &UserData{Balance: 50} // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç 50 –º–æ–Ω–µ—Ç
		userData[update.Message.From.ID] = user
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞—â–∏—Ç—É –æ—Ç —Å–ø–∞–º–∞
	if protectionTime, exists := spamProtection[update.Message.From.ID]; exists && time.Since(protectionTime) < 24*time.Hour {
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è —Å—ã–≥—Ä–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
		sendMessage(update.Message.Chat.ID, "–ß–µ–ª, —Ç—ã –ª—é—Ç–æ –∑–∞–ø–æ—Ç–µ–ªü•µ.\n–ü–æ–∫–∏–¥–∞–µ—à—å —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.")
		return
	}

	switch diceValue {
	case 1:
		user.Balance -= 5
	case 2:
		user.Balance -= 4
	case 3:
		// –ù–∏—á–µ–≥–æ –Ω–µ —É–±–∞–≤–ª—è–µ–º
	case 4:
		user.Balance += 4
	case 5:
		user.Balance += 5
	}

	sendMessage(update.Message.Chat.ID, fmt.Sprintf("–¢–≤–æ–π –±—Ä–æ—Å–æ–∫ –Ω–∞: %d –∏–∑ 5.\n–ë–∞–ª–∞–Ω—Å: %d –º–æ–Ω–µ—Ç–æ–∫\n‚ÄºÔ∏è–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å %d –±—Ä–æ—Å–∫–∞(–æ–≤) –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ä—ã–≤–æ–º.‚ÄºÔ∏è", diceValue, user.Balance, 4-user.GamesPlayed))

	// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã –∏ timestamp
	user.LastGameTime = time.Now()
	user.LastGameTS = time.Now().Unix()

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä
	user.GamesPlayed++

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—ã–≥—Ä–∞–ª 5 —Ä–∞–∑, –æ–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞—â–∏—Ç—É –Ω–∞ 10 –º–∏–Ω—É—Ç
	if user.GamesPlayed == 5 {
		sendMessage(update.Message.Chat.ID, "–ß–µ–ª, —Ç—ã –ª—é—Ç–æ –∑–∞–ø–æ—Ç–µ–ªü•µ.\n–ü–æ–∫–∏–¥–∞–µ—à—å —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.")
		spamProtection[update.Message.From.ID] = time.Now()
	}
}

func showTopPlayers(chatID int64) {
	userDataMu.Lock()
	defer userDataMu.Unlock()

	// –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Å–ª–∞–π—Å —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
	var sortedUsers []struct {
		UserName string
		Balance  int
	}

	// –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–∞–π—Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–∞—Ä—Ç—ã
	for id, data := range userData {
		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
		member, err := bot.GetChatMember(tgbotapi.GetChatMemberConfig{tgbotapi.ChatConfigWithUser{
			ChatID: chatID, UserID: id}})

		if err != nil {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
			fmt.Println("Error getting user info:", err)
			continue
		}

		// –ü–æ–ª—É—á–∞–µ–º UserName –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		userName := member.User.UserName
		if userName == "" {
			// –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç UserName, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∞–π–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @123456789
			userName = fmt.Sprintf("@%d", id)
		}

		sortedUsers = append(sortedUsers, struct {
			UserName string
			Balance  int
		}{UserName: userName, Balance: data.Balance})
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
	if len(sortedUsers) == 0 {
		sendMessage(chatID, "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
		return
	}

	// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞
	sort.Slice(sortedUsers, func(i, j int) bool {
		return sortedUsers[i].Balance > sortedUsers[j].Balance
	})

	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–∞–º–∏
	var topMessage strings.Builder
	topMessage.WriteString("–¢–æ–ø-10 —á—ë—Ä–Ω–æ–º–∞–∑—ã—Ö:\n")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–∫–µ)
	topCount := 10
	if len(sortedUsers) < 10 {
		topCount = len(sortedUsers)
	}

	for i := 0; i < topCount; i++ {
		// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
		topMessage.WriteString(fmt.Sprintf("%d. %s: %d –º–æ–Ω–µ—Ç\n", i+1, sortedUsers[i].UserName, sortedUsers[i].Balance))
	}

	sendMessage(chatID, topMessage.String())
}

func main() {
	connectWithTelegram()
	loadUserData()
	go resetThrows()
	updateConfig := tgbotapi.NewUpdate(0)
	updates := bot.GetUpdatesChan(updateConfig)

	userData = make(map[int64]*UserData)
	lastGame = make(map[int64]time.Time)
	spamProtection = make(map[int64]time.Time)

	for update := range updates {
		if update.Message != nil {
			chatID := update.Message.Chat.ID // –æ–±–Ω–æ–≤–ª—è–µ–º chatID –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
			switch strings.ToLower(update.Message.Text) {
			case "/start":
				messageText := "–ü—Ä–∏–≤–µ—Ç! –Ø - <b>–ï–±—É—á–∏–π</b> üê∂.\n–Ø –Ω–∞—Å—Ç–æ–ª—å–∫–æ —Ç—ë–º–Ω—ã–π, —á—Ç–æ –Ω–∞—É—á—É –≤–∞—Å –±—Ä–æ—Å–∞—Ç—å —ç—Ç–æ—Ç —á—ë—Ä—Ç–æ–≤ –º—è—á –≤ –∫–æ–ª—å—Ü–æ!‚õπüèæ‚Äç\n–ö–∏–¥–∞–π –º—è—á, –∞ —è –æ—Ü–µ–Ω—é, —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å. üèÄ"

				// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
				message := tgbotapi.NewMessage(chatID, messageText)
				message.ParseMode = tgbotapi.ModeHTML

				bot.Send(message)
			case "/help":
				messageText := "–¢—ã —Ä–µ–∞–ª—å–Ω–æ <b>–¥–æ–ª–±–æ—ë–±?</b>ü§®–Ø –∂–µ –æ–±—ä—è—Å–Ω–∏–ª –∫–∞–∫ –∫–∏–¥–∞—Ç—å –º—è—á!\n–ö–∏–¥–∞–π –º–Ω–µ üèÄ, —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å."
				message := tgbotapi.NewMessage(chatID, messageText)
				message.ParseMode = tgbotapi.ModeHTML

				bot.Send(message)
			case "/ebutop":
				showTopPlayers(chatID)
			default:
				if isMessageForIbuchi(&update) {
					sendMessage(chatID, "–¢—ã –∫–∏–Ω—É–ª –º—è—á!\n–°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è!üòØ")
					evaluateUserThrow(&update)
					saveUserData() // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –±—Ä–æ—Å–∫–∞
				}
			}
		}
	}
}
